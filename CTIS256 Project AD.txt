========================================================================================
=========================================  DB  =========================================
========================================================================================

- this is just for structural purpose, these sql commands may or may not work
- we have to use InnoDB if we want to use a relational model...

CREATE TABLE MARKET (
  mid int(11) NOT NULL AUTO_INCREMENT,
  email varchar2(100),
  name varchar2(64),
  password varchar2(64),
  city varchar2(100),
  distirct varchar2(100),
  address varchar2(100),
  ADD CONSTRAINT `mid_pk` PRIMARY KEY (`mid`),
  UNIQUE KEY `email` (`email`)
)

CREATE TABLE CONSUMER (
  email varchar2(100),
  name varchar2(64),
  password varchar2(64),
  city varchar2(100),
  distirct varchar2(100),
  address varchar2(100),
  ADD CONSTRAINT `email` PRIMARY KEY(`email`)
)

CREATE TABLE PRODUCT (
  pid int(11),
  mid int(11),
  title varchar2(100),
  stock int(11),
  normal_price decimal(13,2),
  discnt_price decimal(13,2),
  expr_date date,
  img varchar2(100),
  ADD CONSTRAINT `pid_pk` PRIMARY KEY(`pid`),
  ADD CONSTRAINT `mid_fk` FOREIGN KEY(`mid`) REFERENCES `MARKET`(`mid`) ON DELETE CASCADE
)

========================================================================================
=======================================  NOTES  ========================================
========================================================================================

- the names of the pages can be changed xd. 
- if the functional requirements of the pages are changed they must be informed pliz.
- all _GET and _POST data must be verified and sanitized?!!
- all forms must be sticky
- the application will use sessions so each page (except register.php and login.php) 
	will first authenticate the session, check user_type and then display the 
	page only if that users user_type is allowed to view that page.
- there will be one auth.php file that will establish a connection to the db.
	this file will provide some essential functions that must not be implemented
	else where.
- in the case of any fatal errors, the application will redirect the user to the error 
	page where the error message will be displayed via an error dictionary.
	i.e. error codes e.g. 101: unauthorized access.

========================================================================================
======================================  auth.php  ======================================
========================================================================================

This php file will be included in all the other necessary php files.
It will establish a connection to the db.
It will have some essential functions that will be widely used among the application
    examples; authenticateUser($email, $password) {authenticates the user, then 
	      returns the user_type or false}
We can add anything that is needed later

RESTRICTIONS: No direct access.

NOTES: 

DIFFICULTY: 4 / 10

========================================================================================
====================================  register.php  ====================================
========================================================================================

A register page where the user is asked for their; email, password, name, city, 
district, address, user_type.
The email has to be verified as an email with regex before being confirmed by sending
an email with a confirmation code. The confirmation code will be verified on the same
page, once verified the users information will be inserted into either the MARKET or
CONSUMER database table depending on their user_type selection.
If the users info is inserted into the table successfully they are 
redirected to login.php

RESTRICTIONS: All users except authenticated users.

NOTES: - It may be easier to have a seperate confirm.php file to; confirm the
      users email, add their information to the database, forward to login.php.
      But a single page would be cooler xd.
      - Email confirmation may be done using the database, a table will be added
      if required. Or could be done using sessions.
      - The password will be saved into the database after being encrypted with
      bcrypt. Salting would be cool, so the salt string must be changed in the 
      authenticateUser function.

DIFFICULTY: 9 / 10

========================================================================================
======================================  login.php  =====================================
========================================================================================

a simple login page that will authenticate the user then redirect them to their 
main page depending on their user_type.

RESTRICTIONS: All users except authenticated users.

NOTES:

DIFFICULTY: 4 / 10

========================================================================================
======================================  profile.php  ===================================
========================================================================================

The users information will be displayed. There will also be an edit button, 
when the button is pressed the user will be able to alter their own information.
The alter/edit form will be on this page.

RESTRICTIONS: All authenticated users.

NOTES: - Additionally we could add a delete user process where the user is removed 
	 from the db.

DIFFICULTY: 6 / 10

========================================================================================
=====================================  products.php  ===================================
========================================================================================

Displays the market users posted products. Enables the user to alter/delete 
their products. Also allows the user to add a product.

RESTRICTIONS: Authenticated market users only.

NOTES: 

DIFFICULTY: 7 / 10

========================================================================================
======================================  index.php  =====================================
========================================================================================

Displays all the current products. 
If the user is an authenticated consumer, allows them to add any product to their
cart. This page will also have a search bar that will filter and sort the items 
appropriately.

RESTRICTIONS: All users.

NOTES: - The cart is session based and will be stored in $_SESSION['cart'].
	 The cart is an array of associative arrays with the structure of
	 ["pid" => 123, "count" => 2]

DIFFICULTY: 6 / 10

========================================================================================
======================================  cart.php  ======================================
========================================================================================

Displays all the consumers items in their cart with relevant information...
Allows the consumer to increment the number of items they want to purchase 
but checks to see if there is enough stock simultaneously.
Allows the consumer to purchase the entire cart. When the cart is purchased all 
the items in the cart should be deducted from the products table as well as the 
$_SESSION['cart'] array.

RESTRICTIONS: Authenticated consumer users only.

NOTES: - The cart arrays structure is an array of associative arrays as such;
	 ["pid" => 123, "count" => 2]
       - A seperate purchase.php file could be used if required.
       - AJAX could be used here to check the stock of the item before incrementing 
	 its count. For bonus points?

DIFFICULTY: 6 (8 if AJAX) / 10

========================================================================================
=====================================  error.php  ======================================
========================================================================================

Displays an error message with the given error code. An error dictionary will be used

RESTRICTIONS: All users.

NOTES: 

DIFFICULTY: 2 / 10











